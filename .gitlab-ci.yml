include:
  - local: ".gitlab-ci.d/i18n.yml"

  - project: "tpe/testmo-reporter"
    file: '/scenarios/testmo-script.yml'

  - component: gitlab.protontech.ch/proton/devops/cicd-components/kits/devsecops/generic@0.0.14
    inputs:
      allowed-to-fail: false
      run-gitleaks-no-git-scan: false
      stage: scan

  - component: gitlab.protontech.ch/tpe/test-scripts/slack@0.0.2

  - component: gitlab.protontech.ch/proton/devops/cicd-components/kubernetes/atlas-deploy/pipenv@0.7.0
    inputs:
      cleanup-stage: cleanup

  - component: gitlab.protontech.ch/proton/devops/cicd-components/kubernetes/atlas-deploy/pipenv@0.7.0
    inputs:
      cleanup-stage: cleanup
      deploy: manual
      cleanup: manual
      images: $IMAGES
      key: customenv$CI_PIPELINE_ID
      suffix: ":custom"

variables:
  LANG: "en_US.UTF-8"
  MINT_PATH: "$CI_PROJECT_DIR/ci-cache/mint"
  ATLAS_DEPLOY_LIST: ""
  ATLAS_LINK_APP: mail
  GIT_SUBMODULE_STRATEGY: recursive
  IMAGES: $IMAGES

# See https://confluence.protontech.ch/pages/viewpage.action?pageId=121918293
stages:
  - i18n
  - scan
  - deploy
  - build
  - test
  - report
  - cleanup
  - distribute
  - bot

.setup_project: &setup_project
  - echo -e "machine gitlab.protontech.ch\n  login gitlab-ci-token\n  password $CI_JOB_TOKEN\n\n" > ~/.netrc
  - chmod 0600 ~/.netrc
  - mint bootstrap
  - cd ProtonMail
  - bundle install
  - ./xcodeGenHelper.sh
  - cd ..

.macos_job:
  image: team-mail:3
  cache:
    - key:
        files:
          - Mintfile
      paths:
        - ci-cache/mint
      when: always
    - key:
        files:
          - ProtonMail/Gemfile.lock
      paths:
        - bundler-cache
      when: always
    - key:
        files:
          - ProtonMail/ProtonMail.xcworkspace/xcshareddata/swiftpm/Package.resolved
      paths:
        - ci-cache/spm
      when: always
  before_script:
    - *setup_project
  tags:
    - mail-tart

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: $CI_COMMIT_BRANCH == "develop"

build:debug:for-testing:
  extends: .macos_job
  stage: build
  allow_failure: false
  interruptible: true
  artifacts:
    when: on_success
    paths:
      - test_output/Build/Products/Debug-iphonesimulator/ProtonMail.app
      - test_output/Build/Products/Debug-iphonesimulator/ProtonMailUITests-Runner.app
      - build_job_pwd.txt
    expire_in: 1 day
  script:
    - cd ProtonMail
    - bundle exec fastlane build_for_testing
    # record the current directory so that it can be used by the test jobs to calculate code coverage if they run on a different runner
    - echo ${PWD#/private} >> ../build_job_pwd.txt

test:unit:
  extends: .macos_job
  stage: test
  coverage: '/Test Coverage: \d*.\d*%/'
  only:
    - master
    - main
    - develop
    - /^release\/.*$/
    - merge_requests
  except:
    - schedules
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test_output/slatherOutput/cobertura.xml
    paths:
      - test_output/slatherOutput/
  script:
    - brew bundle --force
    - cd ProtonMail
    - bundle exec fastlane unit_test
    - ../Scripts/generate_code_coverage_report.sh
  tags:
    - iOS_GENERAL

.test:ui:
  extends: .macos_job
  dependencies:
    - atlas:deploy:pipenv
    - build:debug:for-testing
  stage: test
  artifacts:
    when: always
    name: "test-report"
    paths:
      - test_output/TestResults
    expire_in: 10 days
    reports:
      junit:
        - test_output/TestResults/report.xml
  before_script:
    - defaults write com.apple.iphonesimulator ConnectHardwareKeyboard 0 # Fixed UI tests failing on secure field
    - brew bundle --force
    - *setup_project
  tags:
    - iOS_UITEST

test:ui:smoke:
  extends: .test:ui
  except:
    - schedules
  only:
    refs:
      - master
      - main
      - develop
      - /^release\/.*$/
      - merge_requests
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test_output/slatherOutput/cobertura.xml
  script:
    - echo DYNAMIC_DOMAIN="${DYNAMIC_DOMAIN}"
    - cd ProtonMail
    - bundle exec fastlane ui_test testplan:"SmokeTests" concurrent_workers:"2"
    - ../Scripts/generate_code_coverage_report.sh
  tags:
    - iOS_GENERAL

test:ui:sanity:
  extends: .test:ui
  rules:
      # Allow job to run automatically on each scheduled job with sanity test type
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $TEST_TYPE == "sanity"'
      when: always
    - when: manual
  script:
    - echo DYNAMIC_DOMAIN="${DYNAMIC_DOMAIN}"
    - cd ProtonMail
    - bundle exec fastlane ui_test testplan:"SanityTests" concurrent_workers:"4"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test_output/slatherOutput/cobertura.xml
  allow_failure: true

test:ui:feature:
  extends: .test:ui
  rules:
    - if: '$TEST_TYPE == "feature"'
      when: always
  script:
    - cd ProtonMail
    - bundle exec fastlane ui_test testplan:$TEST_PLAN concurrent_workers:$NUMBER_OF_DEVICES

test:ui:regression:
  extends: .test:ui
  timeout: 4 hours
  rules:
      # Allow job to run automatically on each scheduled job with regression test type
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $TEST_TYPE == "regression"'
      when: always
    - when: manual
  script:
    - cd ProtonMail
    - bundle exec fastlane ui_test testplan:RegressionTests concurrent_workers:$NUMBER_OF_DEVICES
  allow_failure: true

test:ui:monkey:
  extends: .test:ui
  timeout: 2 hours
  rules:
    - if: '$TEST_TYPE == "monkey"'
  artifacts:
    name: "monkey-report"
  script:
    - cd ProtonMail
    - bundle exec fastlane ui_test testplan:MonkeyTests concurrent_workers:1

.report:slack:
  stage: report
  extends:
    - .reporting:slack
  variables:
    FOLDER_PATH: "test_output/TestResults/"
    PLATFORM: "ios"
  allow_failure: true
  tags:
    - shared-small

report:slack:feature:
  dependencies:
    - test:ui:feature
    - test:ui:regression
  extends: .report:slack
  rules:
    - if: '$TEST_TYPE == "regression" || $TEST_TYPE == "feature"'
      when: always
  variables:
    SLACK_CHANNEL: "$SLACK_CHANNEL"
    JOB_NAME: "$TEST_PLAN"

report:slack:monkey:
  dependencies:
    - test:ui:monkey
  extends: .report:slack
  rules:
    - if: '$TEST_TYPE == "monkey"'
      when: always
  variables:
    SLACK_CHANNEL: "mail-ios-uitests"
    JOB_NAME: "Mail-iOS-Monkey-tests"

.report:testmo:
  extends: .testmo-upload
  stage: report
  rules:
    - when: manual
  before_script:
    - echo "$MILESTONE"
    - 'if [ -z $MILESTONE ]; then echo "Testmo MILESTONE is not provided. Failing the job."; exit 1; fi'
  variables:
    PROJECT_ID: "7"
    MILESTONE: "$MILESTONE"
    TAGS: "$CI_COMMIT_REF_SLUG"
    SOURCE: "ios"
    RESULT_FOLDER: "./test_output/TestResults/*.xml"
  allow_failure: true
  tags:
    - shared-small

report:testmo:regression:
  dependencies:
    - test:ui:regression
  extends: .report:testmo
  variables:
    NAME: "$TEST_PLAN"

report:testmo:sanity:
  needs:
    - test:ui:sanity
  extends: .report:testmo
  variables:
    NAME: "SanityTests"

.testflight:
  extends: .macos_job
  dependencies: []
  needs: []
  stage: distribute
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: manual
      allow_failure: true
  script:
    - brew bundle --force
    - cd ProtonMail
    - base64 -D -o Certificates.p12 <<< $DISTRIBUTION_CERTIFICATE
    - bundle exec fastlane distribute scheme:"$SCHEME"
    - ./fastlane/add_git_tag.sh
  tags:
    - iOS_RELEASE_BUILD

testflight:qa:
  extends: .testflight
  variables:
    SCHEME: "Adhoc"

testflight:release:
  extends: .testflight
  variables:
    SCHEME: "ProtonMail"
